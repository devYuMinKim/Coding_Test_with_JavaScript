// 제로베이스 프론트엔드 스쿨_SecondLargestBinaryNumber
/*
[문제 설명]
정수 n이 주어집니다. 1부터 n까지의 정수를 각각 이진수로 나타내었을 때, 1이 등장하는 두 번째 최상위 비트 자리의 수를 모두 더하여 출력하시오.
예를 들어, 131을 이진수로 나타내면 10000011이고, 최상위 비트는 27인 128이며, 두 번째 최상위 비트는 21인 2입니다.
만약 4와 같이 이진수로 나타내었을 때 1이 단 한 번만 나타나는 수의 경우에는 0을 더합니다.

만약 n이 6으로 주어진다고 가정할 때, 두 번째 최상위 비트의 자릿수를 모두 더한 결과는 다음과 같습니다.

숫자 1의 비트 1에서 두 번째 최상위 비트는 없으므로 0입니다.
숫자 2의 비트 10에서 두 번째 최상위 비트는 없으므로 0입니다.
숫자 3의 비트 11에서 두 번째 최상위 비트의 수는 20이므로 1입니다.
숫자 4의 비트 100에서 두 번째 최상위 비트는 없으므로 0입니다.
숫자 5의 비트 101에서 두 번째 최상위 비트의 수는 20이므로 1입니다.
숫자 6의 비트 110에서 두 번째 최상위 비트의 수는 21이므로 2입니다.
결과 : 4

[제한 사항]

두 번째 최상위 비트가 없으면 0을 더합니다.
[입력 형식]

n은 1 이상 10,000 이하의 정수입니다.
[출력 형식]

1부터 n까지의 정수를 각각 이진수로 나타내었을 때, 1이 등장하는 두 번째 최상위 비트 자리의 수를 더하여 int 형식으로 출력하세요.
*/

function solution(n) {
  let result = 0;

  for (let i = 3 ; i <= n ; i++) {
    let bin = i.toString(2);

    let bool = false;
    
    for (let j = 0 ; j <= bin.length ; j++) {
      if(bin.charAt(j) == 1 && !bool) {
        bool = true;
      } else if (bin.charAt(j) == 1 && bool) {
        result += Math.pow(2, bin.length - (j + 1));
        
        break;
      }
    }
  }

  return result;
}

console.log(solution(6));