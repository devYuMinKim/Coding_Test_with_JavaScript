// 제로베이스 프론트엔드 스쿨_Speed
/*
[문제 설명]

서울과 제주도를 이은 새로운 고속도로가 개통되었습니다. 새로 개통된 만큼 과속을 방지하지만 서울에서 제주도까지 가장 빠르게 이동할 방법을 찾고 있습니다.

저희는 과속방지 카메라를 두어서 운전자들의 속도를 제한하여 사고도 방지하고 일정한 시간으로 제주도에 도착하게 만들고 싶습니다.

서울에서 제주도까지의 거리가 L으로 주어지고, 사이사이에 현재 배치되어 있는 과속방지 카메라가 주어집니다. 이 과속방지 카메라를 K개 줄일 예정입니다.

예를 들어 서울이 0의 위치에 있고 제주도가 L=10의 위치에 있는 일직선 고속도로가 있다고 할 때, 현재 과속단속 카메라는 [0, 3, 4, 8]의 위치에 존재하고 이 카메라는 [5, 8, 3, 6]의 속도 제한이 있는데 이 속도 제한은 저희가 알던 것과 조금 달라서, 다음 번 카메라까지 5분 안에 혹은 8분, 3분 6분안에 통과해야 합니다.



그러므로 처음 3의 거리를 5분안에, 그 다음 1의 거리를 8분, 4의 거리를 3분, 마지막 2의 거리를 6분안에 통과하여 제주도에 도착할 수 있습니다. 이렇게 하면 3*5 + 1*8 + 4*3 + 2*6으로 47분이 소요됩니다.

여기서, K개의 과속단속 카메라를 없앨 때, 제주도에 도착하는 가장 짧은 시간은 몇분인지 반환해주세요. 만약 2개의 카메라를 없앨 때 두 번째와 네 번째 카메라를 없애면 4의 거리를 5분, 6의 거리를 3분만에 가서 4*5 + 6*3으로 38분만에 제주도에 도착할 수 있고 이보다 더 빠른 방법은 없습니다.

[제한 사항]

- 현재 카메라의 위치 배열과 제한속도 배열의 길이는 1 이상 500 이하입니다.

- 제주도까지의 거리 L은 1 이상 100,000이하이고, 제거할 카메라의 개수 K는 0개 이상 전체 카메라 개수 이하입니다.

- 카메라 위치 배열은 오름차순으로 정렬되어 있고, 카메라는 0의 위치 이상 L위치 미만에 존재합니다.

- 제한속도 배열 각 원소는 1 이상 10,000이하입니다.

[입력 형식]

- 제주도까지의 거리 L과 제거할 카메라의 개수 K 그리고 현재 카메라의 위치 배열인 cameras 와 카메라가 가진 제한 속도 배열 limits가 주어집니다.

[출력 형식]

- K개의 카메라를 제거하여 제주도까지 가장 빠르게 도착할 수 있는 시간을 반환해주세요.
*/

function solution(L, K, cameras, limits) {
  var answer = 0;
  return answer;
}

console.log(solution(10, 2, [0, 3, 4, 8], [5, 8, 3, 6])); // output: 38
